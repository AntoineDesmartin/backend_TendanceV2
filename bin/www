#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backendtendance:server');
var http = require('http');
const socketIO = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



//! Socket Message

const io = socketIO(server);

io.on("connection", (socket) => {
  // console.log("Nouvelle connexion:");
  // console.log("socket.id : ",socket.id);


  //! Rejoins la disscusion
  socket.on("joinRoom",room =>{
    socket.join(room);
    console.log(`${socket.id} a rejoint la room ${room}`);
  })
  //! Quitter la discussion
  socket.on("leaveRoom", (room) => {
    socket.leave(room);
    console.log(`User left room: ${room}`);
  });
  //! Gere les messages
  socket.on("messageSentToBack", (obj,room) => {
    console.log('obj.id :>> ', obj.id);
    console.log("message :>> ",obj.message);
    console.log('room :>> ', room);
    
    socket.to(room).emit("messageReceivedToFront", {message:obj.message,id:obj.id});
    
  });

  
  
  //! disconnect
  socket.on("disconnect", () => {
    console.log("DÃ©connexion:", socket.id);
  });
});




//! Socket Message
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
